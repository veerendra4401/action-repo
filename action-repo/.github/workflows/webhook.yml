name: GitHub Webhook Events

on:
  push:
    branches:
      - '*'
  pull_request:
    types: [opened, reopened, closed]

jobs:
  webhook:
    runs-on: ubuntu-latest
    steps:
      - name: Send Webhook
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          # Get the event type
          EVENT_TYPE="${{ github.event_name }}"
          
          # Get the author
          AUTHOR="${{ github.actor }}"
          
          # Get repository info
          REPO="${{ github.repository }}"
          
          # Build the payload based on event type
          if [[ "$EVENT_TYPE" == "push" ]]; then
            BRANCH="${{ github.ref }}"
            BRANCH=${BRANCH#refs/heads/}
            PAYLOAD=$(cat <<EOF
            {
              "ref": "refs/heads/$BRANCH",
              "after": "${{ github.sha }}",
              "repository": {
                "full_name": "$REPO"
              },
              "sender": {
                "login": "$AUTHOR"
              }
            }
            EOF
            )
          elif [[ "$EVENT_TYPE" == "pull_request" ]]; then
            PR_ACTION="${{ github.event.action }}"
            FROM_BRANCH="${{ github.event.pull_request.head.ref }}"
            TO_BRANCH="${{ github.event.pull_request.base.ref }}"
            PR_ID="${{ github.event.pull_request.id }}"
            IS_MERGED="${{ github.event.pull_request.merged }}"
            
            PAYLOAD=$(cat <<EOF
            {
              "action": "$PR_ACTION",
              "pull_request": {
                "id": $PR_ID,
                "merged": $IS_MERGED,
                "head": {
                  "ref": "$FROM_BRANCH"
                },
                "base": {
                  "ref": "$TO_BRANCH"
                }
              },
              "repository": {
                "full_name": "$REPO"
              },
              "sender": {
                "login": "$AUTHOR"
              }
            }
            EOF
            )
          fi
          
          # Calculate HMAC signature
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha1 -hmac "$WEBHOOK_SECRET" | sed 's/^.* //')
          
          # Send the webhook
          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature: sha1=$SIGNATURE" \
            -H "X-GitHub-Event: $EVENT_TYPE" \
            -H "X-GitHub-Delivery: $(uuidgen)" \
            -d "$PAYLOAD" 